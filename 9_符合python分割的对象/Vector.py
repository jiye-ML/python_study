"""A two-dimensional vector class>>> v1 = Vector2d(3, 4)>>> print(v1.x, v1.y)3.0 4.0>>> x, y = v1>>> x, y(3.0, 4.0)>>> v1Vector2d(3.0, 4.0)>>> v1_clone = eval(repr(v1))>>> v1 == v1_cloneTrue>>> print(v1)(3.0, 4.0)>>> octets = bytes(v1)>>> octetsb'd\\x00\\x00\\x00\\x00\\x00\\x00\\x08@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@'>>> abs(v1)5.0>>> bool(v1), bool(Vector2d(0, 0))(True, False)Test of ``.frombytes()`` class method:>>> v1_clone = Vector2d.frombytes(bytes(v1))>>> v1_cloneVector2d(3.0, 4.0)>>> v1 == v1_cloneTrueTests of ``format()`` with Cartesian coordinates:>>> format(v1)'(3.0, 4.0)'>>> format(v1, '.2f')'(3.00, 4.00)'>>> format(v1, '.3e')'(3.000e+00, 4.000e+00)'Tests of the ``angle`` method::>>> Vector2d(0, 0).angle()"""import arrayimport mathclass Vector():    typecode = 'd'    def __init__(self, x, y):        self.__x = x        self.__y = y        pass    @property    def x(self):        return self.__x    @property    def y(self):        return self.__y    def __iter__(self):        return (i for i in (self.x, self.y))    def __repr__(self):        class_name = type(self).__name__        return '{}({!r},{!r})'.format(class_name, *self) # 构造函数的形式    def __str__(self):        return str(tuple(self))    def __bytes__(self):        return (bytes([ord(self.typecode)]) + bytes(array.array(self.typecode, self)))    def __eq__(self, other):        return tuple(self) == tuple(other)    def __hash__(self):        return hash(self.x) ^ hash(self.y)    def __abs__(self):        return math.hypot(self.x, self.y)    def __bool__(self):        return bool(abs(self))    def angle(self):        return math.atan2(self.y, self.x)    def __format__(self, format_spec):        if format_spec.endwith('p'):            format_spec = format_spec[:-1]            coords = (abs(self), self.angle())            outer_fmt = '<{}, {}>'        else:            coords = self            outer_fmt = ('({}, {})')        componts = (format(c, format_spec) for c in coords)        return outer_fmt.format(*componts)    # 重新定义的构造函数    @classmethod    def frombytes(cls, octests):        typecode = chr(octests[0])        memv = memoryview(octests[1:]).cast(typecode)        return cls(memv)    pass