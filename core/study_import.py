import glob, os'''使用 _ _import_ _ 函数加载模块'''def load_module():    '''    使用 __import__函数动态加载模块，    '''    modules = []    for module_file in glob.glob("Core*.py"):        try:            module_name, ext = os.path.splitext(os.path.basename(module_file))            module = __import__(module_name)            modules.append(module)        except ImportError:            pass    for module in modules:        print(module)    pass'''使用 __import__函数获得特定函数'''def get_function_by_name(module_name, function_name):    module = __import__(module_name)    return getattr(module, function_name)print(repr(get_function_by_name('study_import', 'load_module')))'''使用 _ _import_ _ 函数实现 延迟导入'''class LazyImport:    def __init__(self, module_name):        self.module_name = module_name        self.module = None        pass    def __getattr__(self, item):        if self.module is None:            self.module = __import__(self.module_name)        return getattr(self.module, item)    passstring = LazyImport("string")print(string.ascii_lowercase)'''使用reload函数当你重加载模块时，它会被重新编译，新的模块会替代模块字典里的老模块。但是，已经用原来模块的类建立的实例仍然使用的是老模版。'''import CorePrintreload(CorePrint)