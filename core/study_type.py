'''使用type函数允许检查一个变量的类型，这个函数会返回一个类型描述符，它对于python解释器提供的每个类型都是不同的。每个类型都有一个对应的类型对象，所以你可以使用 is 操作符来检查类型'''def load(file):    if isinstance(file, type("")):        file = open(file, 'rb')    return file.read()print(len(load("../image/reduce.jpg")))print(len(load(open("../image/reduce.jpg", 'rb'))))'''callable 函数，可以检查一个对象是否是可调用的，对于函数，方法，lamdba函数，类，以及实现了__call__方法的类实例，都返回True'''def dump(function):    if callable(function):        print(function, 'is callable')    else:        print(function, 'is not callable')    passclass A:    def method(self, value):        return valueclass B(A):    def __call__(self, value):        return valuea = A()b = B()dump(0) # simple objectsdump("string")dump(callable)dump(dump) # function# 注意类对象都是可调用的，如果调用它们，就产生一个新的对象，但是A的实例不能调用，因为类没有实现 __call__ 方法# 在处理类和实例的时候会复杂，python不会把类作为本质上的类型对待，相反，所有类都属于一个特殊的类类型，# 所有的实例都属于特殊的实例类型# 这意味着你不能使用type函数来测试一个实例是否属于一个给定的类，所有的实例都是同样的类型。dump(A) # classesdump(B)dump(B.method)dump(a) # instancesdump(b)dump(b.method)'''使用 isinstance 函数'''class A:    passclass B:    passclass C(A):    passclass D(A, B):    passdef dump(object):    print(object, "=>")    if isinstance(object, A):        print("A")    if isinstance(object, B):        print("B")    if isinstance(object, C):        print("C")    if isinstance(object, D):        print("D")a = A()b = B()c = C()d = D()dump(a)dump(b)dump(c)dump(d)dump(0)'''使用 issubclass函数注意，isinstance可以接受任何对象作为参数，而issubclass函数在接受非类对象参数时会引发TypeError异常'''