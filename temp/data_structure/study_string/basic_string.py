'''字符串是序列'''fruit = 'bananana'letter = fruit[1]print(type(fruit))print(type(letter)) # strletter = '12'   # 是copyprint(fruit)'''len长度'''print(len(fruit))'''字符串是不可修改的'''# fruit[1] = 'D'    # 不能进行这个操作letter = "12" + fruit[2:]'''搜索'''for word in fruit:    if word == letter:        break'''字符串提供一些方法https://docs.python.org/2/library/stdtypes.html#string-methods'''new_word = fruit.upper()# 从头开始查找fruit.find(letter)# 从某个位置开始查找fruit.find(letter, 3)# 输入终止查找的位置fruit.find(letter, 3, 6)# Return a copy of the string with its first character capitalized and the rest lowercased.fruit.capitalize()# Return centered in a string of length width. Padding is done using the specified fillchar (default is a space).fruit.center()# Return the number of non-overlapping occurrences of substring sub in the range [start, end].fruit.count()# 结尾fruit.endswith("abd")# 去掉多余的空格为一个 Return a copy of the string where all tab characters are replaced by one or more spaces,fruit.expandtabs()# 查找某下标fruit.index("a")# 测试的一些方法# 如果全部字符为字母或者数字fruit.isalnum()# 全部字符是字母fruit.isalpha()# 全部字符是数字fruit.isdigit()# 小写fruit.islower()# 空格fruit.isspace()# 连接fruit.join("bbb")# 小写fruit.lower()# 去掉开头的字符fruit.lstrip()  # 去掉开头的空格fruit.lstrip("www.") # 去掉开头的 www.# 分割字符串 （之前的部分，分割字符串，之后的部分）fruit.partition("abs")# 替代fruit.replace("abc", 'cba')# 查到最后一次出现fruit.rfind("a")fruit.rindex("a")# 去掉前后的空格fruit.strip()fruit.strip("comz")  # 前面和后面所有这四个字母的组合都删除# 大写转为小写fruit.swapcase()'''运算符 in'''def in_both(word, word2):    for letter in word:        if letter in word2:            print(letter)            pass        pass    passin_both('apples', 'original')'''字符串对比'''