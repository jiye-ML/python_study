'''matplotlib（一）——pyplot使用简介    https://blog.csdn.net/qq_31192383/article/details/53977822'''import matplotlib.pyplot as pltimport numpy as np'''pyplot介绍matplotlib.pyplot是一个有命令风格的函数集合，它看起来和MATLAB很相似。每一个pyplot函数都使一副图像做出些许改变，例如创建一幅图，在图中创建一个绘图区域，在绘图区域中添加一条线等等。在matplotlib.pyplot中，各种状态通过函数调用保存起来，以便于可以随时跟踪像当前图像和绘图区域这样的东西。绘图函数是直接作用于当前axes（matplotlib中的专有名词，图形中组成部分，不是数学中的坐标系。） '''def hello_world():    '''    X和Y轴为什么是0~3和1~4。    原因是这样的，这里我们只是为plot()命令提供 了一个list或者是array，matplotlib就会假设这个序列是Y轴上的取值，    并且会自动为你生成X轴上的值。因为python中的范围是从0开始的，因此X轴就是从0开始，长度与Y的长度相同，也就是[0,1,2,3]。    '''    plt.plot([1, 2, 3, 4])    plt.ylabel('some numbers')    plt.show()    passdef hello_world_again():    '''    这表示的是(x,y)对，(1,1)(2,4)(3,9)(4,16)。    这里有第三个可选参数，它是字符串格式的，表示颜色和线的类型。    该字符串格式中的字母和符号来自于MATLAB，它是颜色字符串和线的类型字符串的组合。    默认情况下，该字符串参数是’b-‘，表示蓝色的实线。     '''    plt.plot([1,2,3,4], [1,4,9,16], 'ro')    plt.axis([0, 6, 0, 20])    plt.show()    pass# 通常，我们都是使用numpy数组，实际上，所有的序列都将被在内部被转化成numpy数字。def draw_numpy():    # 0到5之间每隔0.2取一个数    t = np.arange(0., 5., 0.2)    # 红色的破折号，蓝色的方块，绿色的三角形    line = plt.plot(t, t, 'r--', t, t ** 2, 'bs', t, t ** 3, 'g^')    line[0].set_antialiased(False)    plt.show()    pass'''控制线的属性 线有许多属性可以设置：线宽、线的形状，平滑等等。这里有一些设置线属性的方法：1. plt.plot(x,y,linewidth=2.0)2. 对线对象(Line2D)使用set_方法，plot()会返回一个线对象的列表，    比如line1, line2 = plot(x1, y1, x2, y2)。    下面的代码我们将假设我们只有一条线，即返回的线对象列表的长度为1。        line, = plt.plot(x, y, '-')        line.set_antialiased(False) # 关闭平滑        3. 使用setp()命令。setp()可以作用于一个列表对象或者是一个单一的对象。    lines = plt.plot(x1, y1, x2, y2)    plt.setp(lines, color='r', linewidth=2.0)            #  使用关键字    plt.setp(lines, 'color', 'r', 'linewidth', 2.0)      # 或者是MATLAB风格的string/value对    4. 我们可以使用clf()和cla()(clear current figure/axes)清除当前figure和当前axes。 如果你创建了许多figures，你需要注意一件事：figure的内存直到显示调用close()函数才会被完全释放，否则它并没有被全部释放。如果只是删掉对figure的引用，或者是通过关闭window进程管理器关闭该figure，这都是不完全删除figure的，因为pyplot在内部维持了一个引用，直到close()被调用。''''''工作在多图形(figures)和多坐标系(axes) figure()命令在这儿可以不写，因为figure(1)将会被默认执行subplot()中的参数分别指定了numrows、numcols、fignum，其中fignum的取值范围为1到numrows*numcols其实subplot中的参数[111]本应写作[1,1,1]，但是如果这三个参数都小于10(其实就是第三个参数小于10)就可以省略逗号。你可以创建任意数量的子图(subplots)和坐标系(axes)。如果你想手动放置一个axes，也就是它不再是一个矩形方格，你就可以使用命令axes()，它可以让坐标系位于任何位置，axes([left,bottom,width,height])，其中所有的值都是0到1(axes([0.3,0.4,0.2,0.3])表示的是该坐标系位于figure的(0.3,0.4)处，其宽度和长度分别为figure横坐标和纵坐标总长的0.2和0.3)。subplot和axes的区别就在于axes大小和位置更加随意。 你可以创建多个figure，通过调用figure()，其参数为figure的编号。当然每个figure可以包含多个subplot或者是多个axes。'''def subplot():    def f(t):        return np.exp(-t) * np.cos(2 * np.pi * t)    t1 = np.arange(0.0, 5.0, 0.1)    t2 = np.arange(0.0, 5.0, 0.02)    plt.figure("2subplot")    plt.subplot(211)    plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')    plt.subplot(212)    plt.plot(t2, np.cos(2 * np.pi * t2), 'r--')    plt.show()    pass# 多个子图， 指定画图的编号def multi_figure():    plt.figure(1)  # 编号为1的figure    plt.subplot(211)  # figure1中的第一个子图    plt.plot([1, 2, 3])    plt.subplot(212)  # figure1中的第二个子图    plt.plot([4, 5, 6])    plt.figure(2)  # figure2    plt.plot([4, 5, 6])  # 默认使用subplot(111),此时figure2为当    # 前figure    plt.figure(1)  # 设置figure1为当前figure;    # 但是subplot(212)为当前子图    plt.subplot(211)  # 使subplot(211)为当前子图    plt.title('Easy as 1, 2, 3')  # 对subplot(211)命名    plt.show()    pass'''文字 https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.texttext()命令可以被用来在任何位置添加文字，xlabel()、ylabel()、title()被用来在指定位置添加文字。'''# 使用text给figure添加文本def text():    mu, sigma = 100, 15    x = mu + sigma * np.random.randn(10000)    # 直方图    n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)    plt.xlabel('Smarts')    plt.ylabel('Probability')    plt.title('Histogram of IQ')    plt.text(60, .025, r'$\mu=100,\ \sigma=15$')    plt.axis([40, 160, 0, 0.03])    plt.grid(True)    plt.show()    plt.close()    pass'''注释文本 使用text()命令可以在Axes中任意位置放置文本，一个普遍的文本用法是对一些特性进行注释，annotate()方法让添加注释变得很容易。对于注释有两点需要注意：需要被注释的地方，使用xy参数来指出，还有就是注释文本所放置的位置，使用参数xytext来指定位置，这两个参数都使(x,y)元组：'''# 使用annotate方法给figure添加注释def text_annotate():    ax = plt.subplot(111)    t = np.arange(0.0, 5.0, 0.01)    s = np.cos(2 * np.pi * t)    line, = plt.plot(t, s, lw=2)    plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='black', shrink=0.05))    plt.ylim(-2, 2)    plt.show()    plt.close()    pass'''对数和其他非线性坐标轴(axis) matplotlib.pylot不仅仅提供了线性的坐标，还提供了对数(logarithmic)和分对数(logit)坐标。当数据的维度跨越许多数量级时，这种坐标就很有用，改变坐标轴的刻度很容易：plt.xscale(‘log’)'''# 不同坐标轴下的数据分布情况def axis_vs():    # 在区间[0,1]制造一些数据    y = np.random.normal(loc=0.5, scale=0.4, size=1000)    y = y[(y > 0) & (y < 1)]    y.sort()    x = np.arange(len(y))    plt.figure(1)    # 线性    plt.subplot(221)    plt.plot(x, y)    plt.yscale('linear')    plt.title('linear')    plt.grid(True)    # 对数    plt.subplot(222)    plt.plot(x, y)    plt.yscale('log')    plt.title('log')    plt.grid(True)    # symmetric log    plt.subplot(223)    plt.plot(x, y - y.mean())    plt.yscale('symlog', linthreshy=0.05)    plt.title('symlog')    plt.grid(True)    # logit    plt.subplot(224)    plt.plot(x, y)    plt.yscale('logit')    plt.title('logit')    plt.grid(True)    plt.show()    plt.close()    passif __name__ == '__main__':    axis_vs()    pass