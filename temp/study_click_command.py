'''Python Click Command 快速入门    http://xiaoh.me/2016/01/29/click-command/命令行神器 Click 简明笔记:    http://python.jobbole.com/87111/'''import clickimport sysimport os'''Click 的使用大致有两个步骤：    使用 @click.command() 装饰一个函数，使之成为命令行接口；    使用 @click.option() 等装饰函数，为其添加命令行选项等。    使用模版@click.command()@click.option('--param', default=default_value, help='description')def func(param):    pass'''# python hello.py --count 3 --name Ethan    # 指定 count 和 name 的值@click.command()@click.option('--count', default=1, help='Number of greetings.')@click.option('--name', prompt='Your name', help='The person to greet.')def hello(count, name):    for x in range(count):        click.echo('Hello {}'.format(name))class Group:    """    Group    Click 通过 group 来创建一个命令行组，也就是说它可以有各种参数来解决相同类别的不同问题    在Group里面可以添加 pass_content 选项，这样的话，他就会把所有的输入添加到一个对象中去，并且作为第一个参数传递给函数：    """    def __init__(self):        Group.cli.add_command(Group.initdb)        Group.cli.add_command(Group.dropdb)        pass    @staticmethod    @click.group()    def cli():        ''' 执行        $ python hello.py        Usage: hello.py [OPTIONS] COMMAND [ARGS]...                Options:          --help  Show this message and exit.                Commands:          dropdb          initdb        $ python hello.py initdb        Initialized the database        $ python hello.py dropdb        Droped the database                注意： 要执行cli方法        '''        pass    @staticmethod    @click.command()    def initdb():        click.echo('Initialized the database')    @staticmethod    @click.command()    def dropdb():        click.echo('Droped the database')    """    pass_content:        需要提到外面作为全局函数执行    """    # @staticmethod    # @click.group()    # @click.option('--debug/--no-debug', default=False)    # @click.pass_context    # def cli_pass_content(ctx, debug):    #     ctx.obj['DEBUG'] = debug    #    # @staticmethod    # @cli_pass_content.command()    # @click.pass_context    # def sync(ctx):    #     click.echo('Debug is %s' % (ctx.obj['DEBUG'] and 'on' or 'off'))    passclass Option():    '''    option 参数    '''    # 可选值    @staticmethod    @click.command()    @click.option('--gender', type=click.Choice(['man', 'woman']))  # 限定值    def choose(gender):        '''        # 在某些情况下，一个参数的值只能是某些可选的值，如果用户输入了其他值，我们应该提示用户输入正确的值。        # 在这种情况下，我们可以通过 click.Choice() 来限定：        '''        click.echo('gender: %s' % gender)    # 多值参数    # 有时，一个参数需要接收多个值。option 支持设置固定长度的参数值， 通过 nargs 指定。    @staticmethod    @click.command()    @click.option('--center', nargs=2, type=float, help='center of the circle')    @click.option('--radius', type=float, help='radius of the circle')    def circle(center, radius):        ''' 执行情况        $ python click_multi_values.py --center 3 4 --radius 10        center: (3.0, 4.0), radius: 10.0        $ python click_multi_values.py --center 3 4 5 --radius 10        Usage: click_multi_values.py [OPTIONS]        Error: Got unexpected extra argument (5)        '''        click.echo('center: %s, radius: %s' % (center, radius))    # 输入密码    @staticmethod    @click.command()    @click.option('--password', prompt=True, hide_input=True, confirmation_prompt=True)    # @click.password_option()    def input_password(password):        '''        有时，在输入密码的时候，我们希望能隐藏显示。option 提供了两个参数来设置密码的输入：        hide_input 和 confirmation_promt，其中，hide_input 用于隐藏输入，confirmation_promt 用于重复输入。        执行情况：        $ python click_password.py        Password:                         # 不会显示密码        Repeat for confirmation:          # 重复一遍        password: 666666        '''        click.echo('password: %s' % password)    # 改变命令行程序的执行    @staticmethod    def print_version(ctx, param, value):        if not value or ctx.resilient_parsing:            return        click.echo('Version 1.0')        ctx.exit()    @staticmethod    @click.command()    @click.option('--version', is_flag=True, callback=print_version, expose_value=False, is_eager=True)    def change_command_explain():        '''        有些参数会改变命令行程序的执行，比如在终端输入 python 是进入 python 控制台,而输入 python --version 是打印 python 版本。        Click 提供 eager 标识对参数名进行标识, 如果输入该参数，则会拦截既定的命令行执行流程，跳转去执行一个回调函数        参数：        is_eager=True 表明该命令行选项优先级高于其他选项；        expose_value=False 表示如果没有输入该命令行选项，会执行既定的命令行流程；        callback 指定了输入该命令行选项时，要跳转执行的函数；        '''        pass    # Feature Switches    @staticmethod    @click.command()    @click.option('--upper', 'transformation', flag_value='upper', default=True)    @click.option('--lower', 'transformation', flag_value='lower')    def info3(transformation):        '''        $ python hello.py info3        LINUX2        $ python hello.py info3 --lower        linux2        $ python hello.py info3 --upper        LINUX2        '''        click.echo(getattr(sys.platform, transformation)())    # 自动获取默认值    @staticmethod    @click.command()    @click.option('--username', prompt=True, default=lambda: os.environ.get('USER', ''))    def hello1(username):        '''        $ export USER=xiaoh        $ python hello.py hello1        Username [xiaoh]:        ('Hello,', u'xiaoh')        $ python hello.py hello1        Username [xiaoh]: xingming        ('Hello,', u'xingming')        $ python hello.py hello1 --username xiaoh.me        ('Hello,', u'xiaoh.me')        '''        print("Hello,", username)    passclass Argument():    '''    click.argument:        我们除了使用 @click.option 来添加可选参数，还会经常使用 @click.argument 来添加固定参数。        它的使用和 option 类似，但支持的功能比 option 少。    '''    @staticmethod    @click.command()    @click.argument('coordinates')    def show(coordinates):        '''        $ python click_argument.py                     # 错误，缺少参数 coordinates        Usage: click_argument.py [OPTIONS] COORDINATES             Error: Missing argument "coordinates".                 $ python click_argument.py --help              # argument 指定的参数在 help 中没有显示        Usage: click_argument.py [OPTIONS] COORDINATES                 Options:          --help  Show this message and exit.                 $ python click_argument.py --coordinates 10    # 错误用法，这是 option 参数的用法        Error: no such option: --coordinates                 $ python click_argument.py 10                  # 正确，直接输入值即可        coordinates: 10        '''        click.echo('coordinates: %s' % coordinates)        pass    # 不定参数    @staticmethod    @click.command()    @click.argument('src', nargs=-1)    @click.argument('dst', nargs=1)    def move(src, dst):        '''        其中，nargs=-1 表明参数 src 接收不定量的参数值，参数值会以 tuple 的形式传入函数。        如果 nargs 大于等于 1，表示接收 nargs 个参数值，上面的例子中，dst 接收一个参数值。                执行情况        $ python click_argument.py file1 trash    # src=('file1',)  dst='trash'        move (u'file1',) to trash                 $ python click_argument.py file1 file2 file3 trash   # src=('file1', 'file2', 'file3')  dst='trash'        move (u'file1', u'file2', u'file3') to trash        '''        click.echo('move %s to %s' % (src, dst))    passif __name__ == '__main__':    Option().info3()    pass